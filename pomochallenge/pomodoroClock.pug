doctype

html(lang="en")
    head
        title="pomodoro challenge"
        meta(charset='utf-8')
        meta(http-equiv='X-UA-Compatible',content='IE=edge')
        meta(name='viewport', content='width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no')
        meta(description='freecodecamp pomodoro clock')
        //-script to jquery
        script(src='.././node_modules/jquery/dist/jquery.js')
        //- script to boostrap
        script(src='.././node_modules/bootstrap/dist/js/bootstrap.js')
        //-
        //-link boostrap css
        link(href=".././node_modules/bootstrap/dist/css/bootstrap.css",rel="stylesheet") 
        //-
        link(href=".././node_modules/animate.css/animate.css",rel="stylesheet")
        // fonts
        link(href="https://fonts.googleapis.com/css?family=Bungee|Roboto+Condensed",rel="stylesheet")
        //

        style.
            .jumbotron{
                background-color:#00ECB9;
            }
            .voffset {
                margin-top: 2px;
            }

            .voffset1 {
                margin-top: 5px;
            }

            .voffset2 {
                margin-top: 10px;
            }

            .voffset3 {
                margin-top: 15px;
            }

            .voffset4 {
                margin-top: 30px;
            }

            .voffset5 {
                margin-top: 40px;
            }

            .voffset6 {
                margin-top: 60px;
            }

            .voffset7 {
                margin-top: 80px;
            }

            .voffset8 {
                margin-top: 100px;
            }

            .voffset9 {
                margin-top: 150px;
            }
            #projectContainer{
                text-align: center;
                background:#00ECB9;
                font-family:sans-serif;
                font-weight:100;
            }

            body{
                text-align: center;
                background:#00ECB9;
                font-family:sans-serif;
                font-weight:100;

            }

            .clockswag{
                font-family:'Roboto Condensed',sans-serif;
                color: #fff;
                display: inline-block;
                font-weight:100;
                text-align:center;
                font-size: 30px;
            }
            .clockswag >div{
                padding:10px;
                border-radius: 3px;
                background: #00BF96;
                display: inline-block;
            }
            .clockswag div >span {
                padding:15px;
                border-radius:3px;
                background: #00816A;
                display:inline-block;

            }
            .smalltext{
                font-family:'Roboto Condensed',sans-serif;
                padding-top: 5px;
                font-size:16px;

            }
            .btnswag{
                background-color:#00816A;
                color:#fff;
                font-family:'Roboto Condensed',sans-serif;

            }

            .pTitle{
                font-family:'Bungee',cursive;
                text-align:center;
                font-size:34px;

            }



    body

        script.
            var dummy;
            var simRunning=false;
            var timeToUse;
            var pomoTimetoUse;
            var pTimerObject={Hours:0,minutes:0,seconds: 0,breakHours:0,breakMinutes:0,breakSeconds:0};
           
           
            $(function(){
                dummy= setTimeout(onPreloadTimeOut,2000);
            });

            /**
            function to parse the time that is remaining on the clock
            @param valueTimeRemaining argument to contain the value of time remaining on the clock
            @return parsed date object to be handled on the frontend
            **/
            function timeRemaining(valueTimeRemaining){
                var tmptime,tmpSeconds,tmpMinutes,tmpHours;
                tmptime= Date.parse(valueTimeRemaining)-Date.parse(new Date());
                tmpSeconds= Math.floor((tmptime/1000)%60);
                tmpMinutes= Math.floor((tmptime/1000/60)%60);
                tmpHours= Math.floor((tmptime/(1000*60*60))%24);
                return {
                    'itemTime':tmptime,
                    'hours':tmpHours,
                    'minutes':tmpMinutes,
                    'seconds':tmpSeconds
                    };

            }
            /*
            function to register all atributes(yeahh 2016 and using jquery cause i'm lazy....)
            */
            function registerElementProps(){
                //hide all them pluses and minuses
                $("#clockHours").hide();
                $("#clockMinutes").hide();
                $("#pomodoroHours").hide();
                $("#pomodoroMinutes").hide();
                //


                //set all elements values
                $("#SpHours").text("00");
                $("#spMinutes").text("25");
                $("#spSeconds").text("60");
                $("#pomoHours").text("00");
                $("#pomoMinutes").text("05");
                $("#pomoSeconds").text("60");
                //
                //check div hours is visible and act accordingly
                $("#hContainer").click(function(){
                    //check visibility
                    if($("#clockHours").is(":visible")){
                        $("#clockHours").hide("slow");
                    }
                    else{
                        $("#clockHours").hide().removeClass('hidden').fadeIn('slow');
                    }
                    //
                });
                //
                // check if div minutes is visible and act accordingly
                $("#mContainer").click(function(){
                    if($("#clockMinutes").is(":visible")){
                        $("#clockMinutes").hide("slow");
                    }
                    else{
                        $("#clockMinutes").hide().removeClass('hidden').fadeIn('slow');
                    }


                });
                //
                //same as above this time for the break timmer
                // hours break timer visibility checker
                $("#pomHours").click(function(){
                    if ($("#pomodoroHours").is(":visible")){
                        $("#pomodoroHours").hide("slow");
                    }
                    else{
                        $("#pomodoroHours").hide().removeClass('hidden').fadeIn('slow');
                    }

                });
                //
                // minutes break timer visibility checker
                $("#pomMin").click(function(){
                    if ($("#pomodoroMinutes").is(":visible")){
                        $("#pomodoroMinutes").hide("slow");
                    }
                    else{
                        $("#pomodoroMinutes").hide().removeClass('hidden').fadeIn('slow');
                    }


                });
                //
            }

            /**
            function to initiate the pomodoro
            **/
            function initiatePomodoro(){
                try{
                    if (simRunning){
                        return;
                    }

                    // don't like the new stuff but mehhhh go to take it
                    var thours= parseInt($("#SpHours").text());
                    var tmin= parseInt($("#spMinutes").text());
                    var tsecs= parseInt($("#spSeconds").text());
                    // hammering time( adds the current time to the object just to keep stuff simple)
                    pomoTimetoUse.Hours=thours;
                    pomoTimetoUse.minutes=tmin;
                    pomoTimetoUse.seconds=tsecs;
                    pomoTimetoUse.breakHours= parseInt($("#pomoHours").text());
                    pomoTimetoUse.breakMinutes= parseInt($("#pomoMinutes").text());
                    pomoTimetoUse.breakSeconds= parseInt($("#pomoSeconds").text);
                    //

                    // numbskulls implementation of date objects and i too lazy to use moment.js
                    // check if hours is to be accounted
                    if (thours>0){
                        timeToUse= new Date();
                        timeToUse.setHours(timeToUse.getHours()+thours);
                        timeToUse.setMinutes(timeToUse.getMinutes()+tmin);
                        timeToUse.setSeconds(timeToUse.getSeconds()+tsecs);

                    }
                    else{
                        timeToUse=new Date(Date.parse(new Date()) + ( tmin * tsecs * 1000));
                    }
                    //
                    // to delete after
                    console.log(" time calc: " + timeToUse);
                    //

                    startClock(timeToUse,'clockContainer');

                }
                catch(ex)
                {
                    console.log("erro initiatePomodoro: " + ex);
                }



            }
            /**
            function to handle the the clock startup
                @param valueTimer item to to be counted down from
                @param valueComponent item to be changed (either the timer or the break timer)
            **/
            function startClock(valueTimer,valueComponent){
                function updateClock(){

                        var tmpTime= timeRemaining(valueTimer);

                        hoursItem.innerHTML=('0'+tmpTime.hours).slice(-2);
                        minutesItem.innerHTML=('0'+tmpTime.minutes).slice(-2);
                        secondsItem.innerHTML=('0'+tmpTime.seconds).slice(-2);

                        if (tmpTime.itemTime<=0||simRunning===false){
                            clearInterval(valueInterval);


                        }
                    }
                try{
                    // to test if it works again with the break timer
                    if (simRunning){
                        return;
                    }
                    //
                    simRunning=true;

                    var tmpComponent= document.getElementById(valueComponent);
                    var hoursItem=tmpComponent.querySelector('.hours');
                    var minutesItem= tmpComponent.querySelector('.minutes');
                    var secondsItem= tmpComponent.querySelector('.seconds');

                    
                    updateClock();
                    var valueInterval= setInterval(updateClock,1000);

                }
                catch(ex){
                    console.log("ERRO startClock:" + ex);

                }


            }
            /**
            function to handle the timeout from the preloader
            **/
            function onPreloadTimeOut(){
                $("#preloaderdiv").hide();
                
                $("#projectContainer").hide().removeClass('hide').fadeIn('slow');

                registerElementProps();            
            }

            /**
            function to stop the pomodoro
            **/
            function stopPomodoro(){

                if (simRunning){
                    simRunning=false;
                }
            }
            /**
            function to reset the pomodoro
            **/
            function resetPomodoro(){
                if (!simRunning){
                    //set all elements values
                    $("#SpHours").text("00");
                    $("#spMinutes").text("25");
                    $("#spSeconds").text("60");
                    $("#pomoHours").text("00");
                    $("#pomoMinutes").text("05");
                    $("#pomoSeconds").text("60");
                    //

                }

            }
            /**
            function to increase ammount
            **/
            function increaseValue(value){

                var tmpNumber=0;
                if (value.id.startsWith('clock')){
                    if (value.id.endsWith('Hours')){
                        tmpNumber= $("#SpHours").text();
                    }
                    else{
                        tmpNumber= $("#spMinutes").text();
                    } 
                }
                else{
                    if (value.id.endsWith('Hours')){
                        tmpNumber= $("#pomoHours").text();
                    }
                    else{
                        tmpNumber= $("#pomoMinutes").text();
                    } 
                }    
                if (tmpNumber<59){
                    tmpNumber++;
                    if (value.id.startsWith('clock')){
                        if (value.id.endsWith('Hours')){
                            // cause i'm lazy as frack and it's raining outside
                            if (tmpNumber>24){
                                tmpNumber=24;
                            }
                            //
                            $("#SpHours").text(tmpNumber);
                        }
                        else{
                            $("#spMinutes").text(tmpNumber);
                        }

                    }
                    else{
                        if (value.id.endsWith('Hours')){
                            //once again cause i'm lazy as frack and it's saturday and i'm not in the mood to think
                            if (tmpNumber>24){
                                tmpNumber=24;
                            }
                            //
                            $("#pomoHours").text(tmpNumber);
                        }
                        else{
                            $("#pomoMinutes").text(tmpNumber);
                        }
                    }

                }
            } 
            /**
            function to decrease the ammount
            **/
            function decreaseValue(value){
                var tmpNumber=0;
                if (value.id.startsWith('clock')){
                    if (value.id.endsWith('Hours')){
                        tmpNumber= $("#SpHours").text();
                    }
                    else{
                        tmpNumber= $("#spMinutes").text();
                    } 
                }
                else{
                    if (value.id.endsWith('Hours')){
                        tmpNumber= $("#pomoHours").text();
                    }
                    else{
                        tmpNumber= $("#pomoMinutes").text();
                    } 
                }    
                if (tmpNumber>0){
                    tmpNumber--;
                    if (value.id.startsWith('clock')){
                        if (value.id.endsWith('Hours')){
                            $("#SpHours").text(tmpNumber);
                        }
                        else{
                            $("#spMinutes").text(tmpNumber);
                        }

                    }
                    else{
                        if (value.id.endsWith('Hours')){
                            $("#pomoHours").text(tmpNumber);
                        }
                        else{
                            $("#pomoMinutes").text(tmpNumber);
                        }
                    }

                }
            }
        mixin timerConnector(itemId)
            div(id=itemId)
                div(id="pSign"+itemId,class="col-xs-6")
                    button(class="btn btn-default btnswag",onclick="increaseValue("+itemId+");")|+

                div(id="mSign"+itemId,class="col-xs-6")
                    button(class="btn btn-default btnswag",onclick="decreaseValue("+itemId+");")|-

        mixin timerControls(nameofItem)
            div(id=nameofItem)
                button(class="btn btn-default col-xs-6 col-md-4 btn btn-default btnswag",onclick="initiatePomodoro();")|Start
                button(class="col-xs-6 col-md-4 btn btn-default btnswag",onclick="stopPomodoro();")|Stop
                button(class="col-xs-6 col-md-4 btn btn-default btnswag",onclick="resetPomodoro();")|Reset


        div(class="loader",id="preloaderdiv")
        .container-fluid(id="projectContainer" hidden)
            .jumbotron
                div(class="voffset3")
                    div(id="projectTitle",class="pTitle")
                        |Supercalifragilistic pomodoro Clock
                        div(id="containerControls",class="voffset4")
                            +timerControls("controlsContainer") 


                        div(id="clockContainer",class="clockswag voffset4")
                            div
                                span(class="hours",id="SpHours")
                                div(class="hours",id="hContainer") Hours
                                +timerConnector("clockHours")    
                            div
                                span(class="minutes",id="spMinutes")
                                div(class="minutes",id="mContainer") Minutes
                                +timerConnector("clockMinutes")
                            div
                                span(class="seconds",id="spSeconds")
                                div(class="seconds",id="sContainer") Seconds



                        div(id="pomodoroContainer",class="clockswag")
                            div
                                span(class="hours",id="pomoHours")
                                div(class="hours",id="pomHours") Hours
                                +timerConnector("pomodoroHours")
                            div
                                span(class="minutes",id="pomoMinutes")
                                div(class="minutes",id="pomMin") Minutes
                                +timerConnector("pomodoroMinutes")
                            div
                                span(class="seconds",id="pomoSeconds")
                                div(class="seconds",id="pomSecs") Seconds



    hr
    div(class="footer",style="text-align: center") Made by: #{''}
        a(href="http://codepen.io/jonniebigodes/" target="_blank") Jonniebigodes
    //
        div(class="footer",style="text-align: center")
        |Made by
        a(href="http://codepen.io/jonniebigodes/" target="_blank")| :Jonniebigodes    
